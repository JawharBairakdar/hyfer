import React, { Component } from "react"

import WeekComp from "../WeekComp/WeekComp"
import ClassBarRowComp from "../ClassBarRowComp/ClassBarRowComp"
import ClassTaskRowComp from "../ClassTaskRowComp/ClassTaskRowComp"
import Buttons from "../Buttons/Buttons"
import classes from "./timeline.css"
import { appStore } from "../../../Provider";
import { warning } from "../../../notify";


export default class Timeline extends Component {
    state = {
        todayMarkerRef: null,
        scrollingParentRef: null,
        local_update: false,
        allWeeks: null,
    }

    setTodayMarkerRef = ref => {
        this.setState({ todayMarkerRef: ref })
    }

    renderWeekComp = () => {
        const { allWeeks, allWeeks: { error } } = appStore.state.timeline
        if (error) return <h3 className={classes.centerText}>No Current Classes Running...</h3>

        const { rowHeight, itemWidth } = this.props
        return (
            <div className={classes.rowContainer}>
                {allWeeks.map(week => {

                    return (
                        <WeekComp
                            setTodayMarkerRef={this.setTodayMarkerRef}
                            scrollingParentRef={this.refs.timelineWrapper}
                            key={week}
                            week={week}
                            rowHeight={rowHeight}
                            itemWidth={itemWidth}
                        />
                    )
                })}
            </div>
        )
    }

    renderTaskRowComp = () => {

        const { groups, items } = appStore.state.timeline
        if (groups.error) return warning(groups.error)
        return groups.map((group, i) => {
            const [item] = items[group]
            const { itemWidth, rowHeight } = this.props

            return (
                <div key={item.group_name} className={classes.rowContainer}>
                    <ClassTaskRowComp
                        isTeacher={this.props.isTeacher}
                        teachers={this.props.teachers}
                        group={group}
                        width={itemWidth}
                        height={rowHeight}
                    />

                </div>
            )
        })
    }

    handleClickTodayMarker = e => {
        const todayMarker = this.state.todayMarkerRef
        if (todayMarker === null) return warning('Oops! seems to be no current classes are running...') // instead of todayMarker is null
        const classesContainer = this.refs.classesContainer.refs.groupsRowContainer // hackish way, hope good
        const scrollEl = this.refs.timelineWrapper
        let leftPos = todayMarker.parentNode.getBoundingClientRect().x
        leftPos -= scrollEl.offsetWidth / 2 - classesContainer.offsetWidth
        scrollEl.scrollLeft += leftPos
    }

    componentWillMount = () => {
        const { todayMarkerRef, allWeeks } = appStore.state.timeline
        // so that it gets all setState notification from generated by componentDidMount of children elements
        this.setState({
            todayMarkerRef, allWeeks
        })
    }

    componentDidMount = () => {
        this.setState({
            local_update: true
        })
    }

    render() {
        const { itemWidth, rowHeight } = this.props
        const { main: { auth }, timeline: { allWeeks, groups } } = appStore.state
        // if there items are fetched  width is the 200 times total weeks otherwise it's 100vh
        // FIXME: no idea why this is not working with just 16 instead of 21
        const width = allWeeks
            ? itemWidth * allWeeks.length + 21 * allWeeks.length + "px"
            : "100vw"
        return (

            <div className="rootContainer">
                <ClassBarRowComp
                    groups={groups}
                    rowHeight={rowHeight}
                    ref="classesContainer"
                />
                <div
                    className={classes.root}
                    ref="timelineWrapper"
                    onScroll={this.handleScroll}
                >
                    <div className={classes.timelineContainer} style={{ width: width }}>
                        <div className={classes.rowsContainer}>
                            {this.state.local_update && this.renderWeekComp()}
                            {this.state.local_update && this.renderTaskRowComp()}
                        </div>
                    </div>
                </div>
                <div ref="buttonsContainer" className={classes.buttonsContainer}>
                    <Buttons
                        clickHandler={this.handleClickTodayMarker}
                        isTeacher={auth.isATeacher}
                    />
                </div>
            </div>
        )
    }
}
